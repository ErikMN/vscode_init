#!/usr/bin/env bash
set -eu

# Set DEBUG from env:
DEBUG="${DEBUG:-false}"

# Print colors:
FMT_RED=$(printf '\033[31m')
FMT_GREEN=$(printf '\033[32m')
FMT_BLUE=$(printf '\033[34m')
FMT_YELLOW=$(printf '\033[33m')
FMT_WHITE=$(printf '\033[37m')
FMT_BOLD=$(printf '\033[1m')
FMT_RESET=$(printf '\033[0m')

#==============================================================================#
# Initialization section:

# Check input arguments:
if [ $# -eq 0 ]; then
  echo "Please specify the project directory:"
  echo "${FMT_BLUE}  $(basename "$0") ${FMT_GREEN}<project-directory>${FMT_RESET}"
  echo
  echo "For example:"
  echo "${FMT_BLUE}  $(basename "$0") ${FMT_GREEN}my-app${FMT_RESET}"
  exit 0
else
  APP=$1
fi

# Default template:
PROJECT_DESCRIPTION=C
TEMPLATE_DIR=tpl_c_make
TEMPLATE="${TEMPLATE:-}"
VSCODE_TPL="tpl_vscode_make"

# Set template from env:
if [ "$TEMPLATE" = cpp ]; then
  PROJECT_DESCRIPTION=C++
  TEMPLATE_DIR=tpl_cpp_make
elif [ "$TEMPLATE" = sharedlib ]; then
  PROJECT_DESCRIPTION="shared library C"
  TEMPLATE_DIR=tpl_c_lib_make
elif [ "$TEMPLATE" = cmeson ]; then
  PROJECT_DESCRIPTION="C meson"
  TEMPLATE_DIR=tpl_c_meson
  VSCODE_TPL="tpl_vscode_meson"
fi

# Application and OS parameters:
VSCODE="command -v code >/dev/null 2>&1"
GIT="command -v git >/dev/null 2>&1"
GIT_VERSION=$(git --version | cut -d' ' -f3)
GIT_SUPPORTED="2.28.0"
OS=$(uname)
ARCH=$(uname -m)
APPLE_ARM="0"

# macOS does not use GNU realpath:
realpath_macos() {
  [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

# OS specifics:
if [ "$OS" = "Darwin" ]; then
  PROJECT_DIR=$(realpath_macos "$APP")
  if [ "$ARCH" = "arm64" ]; then
    echo "${FMT_YELLOW}*** Apple silicon detected${FMT_RESET}"
    APPLE_ARM="1"
  fi
else
  PROJECT_DIR=$(realpath "$APP")
fi

# Project setup parameters:
APP=$(basename "${APP}")
BASEDIR=$(dirname "$0")
VSCODE_INIT_DIR="$BASEDIR/../share/vscode_init"

# Print all internal parameters if DEBUG env is set:
if [ "$DEBUG" = true ]; then
  printf "OS:                   %s\n" "$OS"
  printf "ARCH:                 %s\n" "$ARCH"
  printf "APP:                  %s\n" "$APP"
  printf "PROJECT_DIR:          %s\n" "$PROJECT_DIR"
  printf "BASEDIR:              %s\n" "$BASEDIR"
  printf "VSCODE_INIT_DIR:      %s\n" "$VSCODE_INIT_DIR"
  printf "TEMPLATE_DIR:         %s\n" "$TEMPLATE_DIR"
  printf "PROJECT_DESCRIPTION:  %s\n" "$PROJECT_DESCRIPTION"
  printf "GIT_VERSION:          %s\n" "$GIT_VERSION"
  printf "\n"
fi

# Exit if a directory of the same name as the project exists:
if [ -d "$PROJECT_DIR" ]; then
  echo "${FMT_RED}*** Error: '$PROJECT_DIR' already exists... exit${FMT_RESET}"
  exit 1
fi

#==============================================================================#
# Functions section:

# Silence a command:
q_cmd() {
  "$@" >/dev/null 2>&1
  ret=$?
  if [ $ret -ne 0 ]; then
    echo "Error: Command '$*' failed"
  fi
  return $ret
}

# Initialize a git repo with an initial commit (git < 2.28.0 does not support 'git init -b <name>'):
GIT_INIT_REPO() {
  if ! $GIT > /dev/null; then
    echo "${FMT_RED}*** Git is not installed: skipping setup repo${FMT_RESET}"
    return
  fi
  if (( $(echo "$GIT_VERSION" $GIT_SUPPORTED | awk '{print ($1 >= $2)}') )); then
    q_cmd git -C "$PROJECT_DIR" init -b main
  else
    q_cmd git -C "$PROJECT_DIR" init && q_cmd git -C "$PROJECT_DIR" checkout -b main
  fi
  q_cmd git -C "$PROJECT_DIR" add -A && q_cmd git -C "$PROJECT_DIR" commit -m "Initial commit"
}

# Set project name in template files:
UPDATE_PROJECT_FILES() {
  find "$PROJECT_DIR" -type f -exec sed -i.bak "s/xxxxxxxxx/$APP/g" {} +
  find "$PROJECT_DIR" -type f -name "*.bak" -exec rm -f {} +
}

# Adjustments based on OS:
CHECK_OS_SPECIFICS() {
  if [ "$APPLE_ARM" = "1" ]; then
    if [ "$TEMPLATE" = cmeson ]; then
      cp "$VSCODE_INIT_DIR/macos/arm/meson/"*.json "$PROJECT_DIR/.vscode/"
    else
      cp "$VSCODE_INIT_DIR/macos/arm/make/"*.json "$PROJECT_DIR/.vscode/"
    fi
  fi
}

# Create a C project with vscode tasks in the provided directory:
SETUP_PROJECT() {
  echo "${FMT_BOLD}*** Initializing $PROJECT_DESCRIPTION project '$APP' in $(dirname "$PROJECT_DIR")${FMT_RESET}"
  mkdir -p "$PROJECT_DIR" &&
  cp -r "$VSCODE_INIT_DIR/$TEMPLATE_DIR/." "$PROJECT_DIR/" &&
  mkdir -p "$PROJECT_DIR/.vscode" &&
  cp "$VSCODE_INIT_DIR/$VSCODE_TPL/"*.json "$PROJECT_DIR/.vscode/" &&
  cp "$VSCODE_INIT_DIR/workspace_settings/"*.json "$PROJECT_DIR/.vscode/" &&
  UPDATE_PROJECT_FILES &&
  CHECK_OS_SPECIFICS &&
  GIT_INIT_REPO
}

# Start Visual Studio Code if it is installed:
START_VSCODE() {
  if $VSCODE > /dev/null; then
    echo "${FMT_BLUE}*** Starting Visual Studio Code${FMT_RESET}"
    code "$PROJECT_DIR"
  else
    echo "${FMT_RED}*** Visual Studio Code is not installed${FMT_RESET}"
  fi
}

#==============================================================================#
# Application start section:

# Execute setup functions:
SETUP_PROJECT
START_VSCODE
echo "${FMT_BOLD}${FMT_GREEN}*** Project created in:" "${FMT_WHITE}""$PROJECT_DIR${FMT_RESET}"
